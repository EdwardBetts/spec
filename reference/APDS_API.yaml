openapi: 3.0.0
info:
  title: APDS
  version: '1.0'
  description: |-
    Allows the standard CRUD operations, as well as listing/search of:

    * `Places` (and their `Occupancy`)
    * `Rates`
    * `RightSpecifications`
    * `AssignedRights`
    * `Sessions`
    * `Observations`
  contact: {}
tags:
  - name: create
    description: Create an assigned right
  - name: read
    description: Read an assigned right
  - name: update
    description: Update an assigned right
  - name: delete
    description: Delete an assigned right
  - name: list
    description: List (search) assigned rights
servers:
  - url: ''
paths:
  /rights/assigned:
    parameters: []
    post:
      summary: Create a new AssignedRight
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                created:
                  value:
                    status: ok
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Missing required attributes
      operationId: create-assigned_right
      description: Create a new `AssignedRight`
      requestBody:
        description: This method allows an issuer to assign a parking right to a holder
        content:
          application/json:
            schema:
              $ref: ../models/right/AssignedRight.yaml
      tags:
        - create
    get:
      summary: List and Search for AssignedRights
      operationId: list-assigned_rights
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedListMeta'
                  - type: object
                    description: ''
                    properties:
                      data:
                        type: array
                        description: Result set with `AssignedRights` and requested expanded attributes
                        items:
                          $ref: ../models/right/AssignedRight.yaml
      description: |-
        Lists `AssignedRights` and allows searching/filtering by:

        * one or more `HolderCredentials` and `RightSpecifications`, to check if given credentials have any of the given rights to park
        * latitude, longitude, radius: to check for `AssignedRights` within a geographic area
        * a list of `Places`, to retrieve all assigned rights within a set of parking locations
        * start_before: to get sessions starting before a given instant
        * end_before: to get sessions ending before a given instant
        * start_after: to get sessions starting after a given instant
        * end_after: to get sessions ending after a given instant
        * a modification instant: to only display changed resources from that point onwards

        Additionally, supports providing a comma-separated list of optional object attributes associated to an `AssignedRight` that should be included in the result set. If unused or left blank, `none` will be assumed.
      tags:
        - list
      parameters:
        - $ref: '#/components/parameters/right_specs_list'
        - $ref: '#/components/parameters/cred_type'
        - $ref: '#/components/parameters/cred_class_list'
        - $ref: '#/components/parameters/cred_id_list'
        - $ref: '#/components/parameters/place_list'
        - $ref: '#/components/parameters/assigned_expand'
        - $ref: '#/components/parameters/lat'
        - $ref: '#/components/parameters/long'
        - $ref: '#/components/parameters/radius'
        - $ref: '#/components/parameters/mod'
        - $ref: '#/components/parameters/start_before'
        - $ref: '#/components/parameters/end_before'
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/end_after'
  '/rights/assigned/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        description: Identifier for the `AssignedRight`
        required: true
    delete:
      summary: Delete AssignedRight
      operationId: delete-assigned_right
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                bad-request:
                  value:
                    status: error
                    code: 400
                    message: Did not provide version number
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Outdated version number provided
      tags:
        - delete
      description: Delete an existing `Assigned Right`
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/common/VersionedReference.yaml
        description: 'The final version of the `AssignedRight` should be sent, to confirm the client is acting based on updated information'
    put:
      summary: Update AssignedRight
      operationId: update-assigned_right
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Missing required attributes
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Outdated version number provided
      description: Update an existing `AssignedRight`
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/right/AssignedRight.yaml
        description: 'The new version of the `AssignedRight`, including only its changed attributes'
      tags:
        - update
    get:
      summary: Get an AssignedRight
      operationId: read-assigned_right
      description: Get latest version of a given `AssignedRight` by its identifier (or a particular previous version when provided as a query parameter)
      tags:
        - read
      parameters:
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/assigned_expand'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/right/AssignedRight.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
  /rights/specs:
    get:
      summary: List and search for RightSpecifications
      tags:
        - list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedListMeta'
                  - type: object
                    properties:
                      data:
                        type: array
                        description: Result set with `RightSpecifications` and requested expanded attributes
                        items:
                          $ref: ../models/right/RightSpecification.yaml
      operationId: list-rights-specs
      description: |-
        Lists `RightSpecifications` and allows filtering by:

        * latitude, longitude, radius: to check for `RightSpecifications` within a geographic area
        * a `Place`, to retrieve all assigned rights within a parking location
        * a modification instant: to only display changed resources from that point onwards

        Additionally, supports providing a comma-separated list of optional object attributes associated to an `RightSpecification` that should be included in the result set. If unused or left blank, `none` will be assumed.
      parameters:
        - $ref: '#/components/parameters/lat'
        - $ref: '#/components/parameters/long'
        - $ref: '#/components/parameters/radius'
        - $ref: '#/components/parameters/specs_expand'
        - $ref: '#/components/parameters/mod'
        - $ref: '#/components/parameters/cred_type'
        - $ref: '#/components/parameters/place_list'
    post:
      summary: Create a new RightSpecification
      operationId: post-rights-specs
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
      tags:
        - create
      description: Create a new `RightSpecification`
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/right/RightSpecification.yaml
        description: The new RightSpec
  '/rights/specs/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Identifier for the `RightSpecification`
    get:
      summary: Get a RightSpecification
      tags:
        - read
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/right/RightSpecification.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
      operationId: get-rights-specs-id
      description: Get latest version of a given `RightSpecification` by its identifier (or a particular previous version when provided as a query parameter)
      parameters:
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/specs_expand'
    put:
      summary: Update a RightSpecification
      operationId: put-rights-specs-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Missing required attributes
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Outdated version number provided
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/right/RightSpecification.yaml
        description: 'The new version of the `RightSpecification`, including only its changed attributes'
      description: Update an existing `RightSpecification`
      tags:
        - update
    delete:
      summary: Delete RightSpecification
      operationId: delete-rights-specs-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                bad-request:
                  value:
                    status: error
                    code: 400
                    message: Did not provide version number
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Outdated version number provided
      tags:
        - delete
      description: Delete a `RightSpecification`
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/common/VersionedReference.yaml
        description: 'The final version of the `RightSpecification` should be sent, to confirm the client is acting based on updated information'
  /rates:
    get:
      summary: List and Search for RateTables
      tags:
        - list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedListMeta'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: ../models/rate/RateTable.yaml
      operationId: get-rates
      description: "Lists `RateTables` and allows searching/filtering by:\n\n* latitude, longitude, radius: to check for `AssignedRights` within a geographic area\n* a list of `Places`, to retrieve all rates connected to `AssignedRights` that belong to any of the given places\n* a list of `RightSpecifications`, to retrieve all the connected \n* a modification instant: to only display changed resources from that point onwards\n\nAdditionally, supports providing a comma-separated list of optional object attributes associated to a `RateTable` that should be included in the result set. If unused or left blank, `none` will be assumed."
      parameters:
        - $ref: '#/components/parameters/lat'
        - $ref: '#/components/parameters/long'
        - $ref: '#/components/parameters/radius'
        - $ref: '#/components/parameters/rates_expand'
        - $ref: '#/components/parameters/mod'
        - $ref: '#/components/parameters/place_list'
        - $ref: '#/components/parameters/right_specs_list'
    post:
      summary: Create a new RateTable
      operationId: post-rates
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
      description: Create a `RateTable`
      tags:
        - create
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/rate/RateTable.yaml
        description: The new RateTable
  '/rates/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Identifier for the `RateTable`
    get:
      summary: Get a RateTable
      tags:
        - read
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/rate/RateTable.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
      operationId: get-rates-id
      description: Get latest version of a given `RateTable` by its identifier
      parameters:
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/rates_expand'
    put:
      summary: Update a RateTable
      operationId: put-rates-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Missing required attributes
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Outdated version number provided
      tags:
        - update
      description: Update an existing `RateTable`
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/rate/RateTable.yaml
        description: 'The new version of the `RateTable`, including only its changed attributes'
    delete:
      summary: Delete RateTable
      operationId: delete-rates-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                bad-request:
                  value:
                    status: error
                    code: 400
                    message: Did not provide version number
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Outdated version number provided
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/common/VersionedReference.yaml
        description: 'The final version of the `RateTable` should be sent, to confirm the client is acting based on updated information'
      tags:
        - delete
      description: Delete an existing `RateTable`
  '/places/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Unique identifier for place hierarchy element
    get:
      summary: Read an element in the Place hierarchy
      tags:
        - read
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HierarchyElementData'
      operationId: get-places-id
      description: Get latest version of a given place hierarchy element by its identifier (or a particular previous version when provided as a query parameter)
      parameters:
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/places_expand'
    put:
      summary: Update Place hierarchy element
      operationId: put-places-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
      description: Update an element in the `Place` hierarchy (or one of its associated attributes like `Occupancy`)
      tags:
        - update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HierarchyElementData'
        description: "The new version of the `Place` hierarchy element, including only its changed attributes. In the case of Occupancy updates, the Place version doesn't need to change."
    delete:
      summary: Delete Place hierarchy element
      operationId: delete-places-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
      description: Delete Place hierarchy element
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/common/VersionedIdentity.yaml
        description: 'The final version of the `Place` hierarchy element should be sent, to confirm the client is acting based on updated information'
      tags:
        - delete
  /places:
    get:
      summary: List and search for elements in the Place hierarchy
      tags:
        - list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedListMeta'
                  - type: object
                    properties:
                      data:
                        type: array
                        description: Hierarchy elements matching filters
                        items:
                          $ref: '#/components/schemas/HierarchyElementData'
                    description: Data response
      operationId: get-places
      description: |-
        Lists `Places` and allows searching/filtering by:

        * `latitude`, `longitude`, `radius`: to check for elements in the `Place` hierarchy within a geographic area
        * a modification instant (`modified_since`): to only display changed resources from that point onwards
        * `layer`: maximum hierarchy element layer desired
        * `type`: types of hierarchy elements
        * `right_type`: types of `RightSpecifications` associated with Place hierarchy elements
        * `structure_type`: types of structure
        * `structure_grade`: grades of structures
        * `name`: name of facilities

        Additionally, supports providing a comma-separated list of optional object attributes associated to a `Place` hierarchy element that should be included in the result set. (see `expand` attribute). If unused or left blank, `none` will be assumed.
      parameters:
        - $ref: '#/components/parameters/lat'
        - $ref: '#/components/parameters/long'
        - $ref: '#/components/parameters/radius'
        - $ref: '#/components/parameters/places_expand'
        - schema:
            type: integer
          in: query
          name: layer
          description: 'Most detailed (lower-level) layer of data desired. 0 (zero) being the first level (and higher numbers correspond to lower-levels of information). If left empty, the entire Place hierarchy that matches the remaining parameters will be returned'
        - $ref: '#/components/parameters/place_type'
        - $ref: '#/components/parameters/right_type'
        - $ref: '#/components/parameters/structure_type'
        - $ref: '#/components/parameters/structure_grade'
        - schema:
            type: string
          in: query
          name: name
          description: Name of place hierarchy element (in any of its supported languages)
        - $ref: '#/components/parameters/mod'
    post:
      summary: Create a new Place hierarchy element
      operationId: post-places
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
      tags:
        - create
      description: Create a new element in the `Place` hierarchy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HierarchyElementData'
        description: The new Place
  /sessions:
    get:
      summary: List and Search for Sessions
      tags:
        - list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedListMeta'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: ../models/session/Session.yaml
      operationId: get-sessions
      description: |-
        Lists `Sessions` and allows searching/filtering by a combination of:

        * latitude, longitude, radius: to check for `Sessions` ocurring in a geographic area (via the associated Place hierarchy element)
        * a list of `Places`, to retrieve all sessions connected to the given elements in the place hierarchy
        * a list of `RightSpecifications`, to retrieve all sessions with segments using any of the given rights
        * one or more `HolderCredentials` to get sessions linked to the given credentials
        * startBefore: to get sessions starting before a given instant
        * endBefore: to get sessions ending before a given instant
        * startAfter: to get sessions starting after a given instant
        * endAfter: to get sessions ending after a given instant
        * a modification instant: to only display changed resources from that point onwards

        Additionally, supports providing a comma-separated list of optional object attributes associated to a `Session` or `Segment` that should be included in the result set. If unused or left blank, `none` will be assumed.
      parameters:
        - $ref: '#/components/parameters/right_specs_list'
        - $ref: '#/components/parameters/cred_type'
        - $ref: '#/components/parameters/cred_class_list'
        - $ref: '#/components/parameters/cred_id_list'
        - $ref: '#/components/parameters/place_list'
        - $ref: '#/components/parameters/sessions_expand'
        - $ref: '#/components/parameters/lat'
        - $ref: '#/components/parameters/long'
        - $ref: '#/components/parameters/radius'
        - $ref: '#/components/parameters/mod'
        - $ref: '#/components/parameters/start_before'
        - $ref: '#/components/parameters/end_before'
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/end_after'
    post:
      summary: Create a new Session
      operationId: post-sessions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
      description: 'Allows the creation of a new Session, along with one or more Segments. It also allows the creation of an AssignedRight, for scenarios in which the Session and the AssignedRight are created simultaneously (e.g. off-street and on-street short stays)'
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/session/Session.yaml
        description: 'The Session, Segments (and potentially AssignedRight) to create'
      tags:
        - create
  '/sessions/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Identifier for the `Session`
    get:
      summary: Get a Session
      tags:
        - read
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/session/Session.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
      operationId: get-sessions-id
      description: Get latest version of a given `Session` by its identifier (or a particular previous version when provided as a query parameter)
      parameters:
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/sessions_expand'
    put:
      summary: Update an existing Session
      operationId: put-sessions-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Missing required attributes
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Outdated version number provided
      description: 'Update an existing Session (or Segment). Segments may also be deleted using this method, by removing them from the list of segments under the Session'
      tags:
        - update
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/session/Session.yaml
        description: 'The `Session` (and `Segments`) to update, including only their changed attributes'
    delete:
      summary: Delete a Session
      operationId: delete-sessions-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Missing required attributes
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Outdated version number provided
      tags:
        - delete
      description: 'Delete an existing `Session`. `Segments` should be deleted by using the `PUT` operation, and removing them from the list of segments under the session'
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/common/VersionedReference.yaml
        description: 'The final version of the `Session` should be sent, to confirm the client is acting based on updated information'
components:
  schemas:
    HierarchyElementData:
      title: HierarchyElementData
      description: Represents an API data exchange model with any of the `Place` hierarchy types
      oneOf:
        - $ref: ../models/place/hierarchy/Campus.yaml
        - $ref: ../models/place/hierarchy/Place.yaml
        - $ref: ../models/place/hierarchy/HierarchyElement.yaml
        - $ref: ../models/place/hierarchy/IdentifiedArea.yaml
        - $ref: ../models/place/hierarchy/Space.yaml
    DeletedReference:
      title: DeletedReference
      type: object
      properties:
        id:
          type: string
        className:
          type: string
          pattern: '^([A-Z][a-z0-9]+)+'
        deleteTimestamp:
          type: string
          format: date-time
          description: The instant when the reference was deleted
      required:
        - deleteTimestamp
        - id
        - className
      description: 'A reference to a deleted identifiable managed object where the identifier is unique. It is described by a string identifying the class of the referenced object (key name) with a unique string identifier as its value, and the deletion instant.'
    PaginatedListMeta:
      title: PaginatedListMeta
      type: object
      description: Metadata for paginated list of results for Listing APIs
      properties:
        meta:
          type: object
          required:
            - referenceInstant
            - offset
            - pageSize
            - total
          properties:
            referenceInstant:
              type: integer
              description: 'Allows a consistent view of data across multiple paged requests. Unix epoch time to be used as reference for offset > 0 (corresponds to query instant, as returned by server on first call) - should be the same for all pages'
              minimum: 0
            offset:
              type: integer
              minimum: 0
              description: Index of the first item returned in the page
            pageSize:
              type: integer
              description: Maximum number of items that can be returned per page
              minimum: 0
            total:
              type: integer
              description: Total number of items contained in all pages
              minimum: 0
        deletedReferences:
          type: array
          description: 'This attribute will returned when the `modified_since` query parameter is used. It will contain references to deleted resources since the provided instant, that would have otherwise been included in the dataset (either at the top-level or as associated objects)'
          items:
            $ref: '#/components/schemas/DeletedReference'
      required:
        - meta
    ResponseStatus:
      title: ResponseStatus
      type: object
      description: 'Codifies responses following some creation, update or delete operation'
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - ok
            - error
          description: Type of status
        code:
          type: integer
          description: Same numbering and semantics as HTTP status codes
        message:
          type: string
          description: Descriptive message for error statuses
  parameters:
    lat:
      schema:
        type: number
        format: float
      in: query
      name: latitude
      description: Location latitude to use as filter (mandatory if longitude or radius are defined)
    long:
      schema:
        type: number
        format: float
      in: query
      name: longitude
      description: Location longitude to use as filter (mandatory if longitude or radius are defined)
    radius:
      schema:
        type: integer
        minimum: 0
      in: query
      name: radius
      description: Number of meters to use as search filter from given latitude and longitude (mandatory if latitude or longitude are defined)
    mod:
      schema:
        type: integer
        minimum: 0
      in: query
      name: modified_since
      description: "Reference timestamp to only display resources that have changed after that instant (represented as seconds, in UTC, since epoch).\n\n* If `expand` attributes are requested, then this timestamp will also applyto those objects’ modifications \n* When this attribute is used, the result-set will also include a list of deleted resources’ IDs, so that the client can use this method to avoid storing stale data"
    assigned_expand:
      schema:
        type: array
      description: Comma-separated list of optional object attributes associated to an `AssignedRight` that should be included in the result set
      name: expand
      in: query
      style: form
      explode: false
    version:
      schema:
        type: integer
        minimum: 1
      in: query
      name: version
      description: 'Previous version number. Useful when a reference to a resource version is found in another dataset, and that version is no longer the latest one. Latest version is assumed when this parameter is not used.'
    specs_expand:
      schema:
        type: array
      description: Comma-separated list of optional object attributes associated to an `RightSpecification` that should be included in the result set
      name: expand
      in: query
      style: form
      explode: false
    cred_type:
      schema:
        type: array
      name: credential_type
      in: query
      description: Type of credential
      style: form
      explode: false
    places_expand:
      schema:
        type: array
      description: Comma-separated list of optional object attributes associated to a `Place` hierarchy element that should be included in the result set
      name: expand
      in: query
      style: form
      explode: false
    right_type:
      schema:
        type: array
      name: right_type
      in: query
      description: Comma-separated list of type of `RightSpecifications` associated with place hierarchy elements (all will be assumed if parameter is not used or left blank)
      style: form
      explode: false
    place_type:
      schema:
        type: array
      name: type
      in: query
      description: Comma-separated list of type of `Place` hierarchy elements to consider (all will be assumed if parameter is not used or left blank)
      style: form
      explode: false
    structure_type:
      schema:
        type: array
      name: structure_type
      in: query
      description: Comma-separated list of types of Structure in the hierarchy to consider (all will be assumed if parameter is not used or left blank)
      style: form
      explode: false
    structure_grade:
      schema:
        type: array
      name: structure_grade
      in: query
      description: Comma-separated list of Structure grades in the hierarchy to consider (all will be assumed if parameter is not used or left blank)
      style: form
      explode: false
    rates_expand:
      schema:
        type: array
      style: form
      explode: false
      description: Comma-separated list of optional object attributes associated to a `RateTable` that should be included in the result set
      name: expand
      in: query
    place_list:
      schema:
        type: array
      description: Comma-separated list of unique identifiers for elements in the `Place` hierarchy
      name: place
      in: query
      explode: false
      style: form
    right_specs_list:
      schema:
        type: array
      description: Comma-separated list of unique identifiers for `RightSpecifications`
      name: right_spec
      in: query
      explode: false
      style: form
    cred_id_list:
      schema:
        type: array
      in: query
      name: credential_id
      description: Comma-separated list of unique identifiers for credentials in given classes
      style: form
      explode: false
    cred_class_list:
      schema:
        type: array
      in: query
      name: credential_class
      description: Comma-separated list of specific class names for credentials (a more generic option is to use `credential_type`)
      style: form
      explode: false
    end_after:
      schema:
        type: integer
        minimum: 0
      in: query
      name: end_after
      description: 'Unix epoch instant in UTC, to filter sessions ending after the given instant'
    start_after:
      schema:
        type: integer
        minimum: 0
      in: query
      name: start_after
      description: 'Unix epoch instant in UTC, to filter sessions starting after the given instant'
    end_before:
      schema:
        type: integer
        minimum: 0
      in: query
      name: end_before
      description: 'Unix epoch instant in UTC, to filter sessions ending before the given instant'
    start_before:
      schema:
        type: integer
        minimum: 0
      in: query
      name: start_before
      description: 'Unix epoch instant in UTC, to filter sessions starting before the given instant'
    sessions_expand:
      schema:
        type: array
      description: Comma-separated list of optional object attributes associated to an `Session` (or `Segment`) that should be included in the result set
      name: expand
      in: query
      style: form
      explode: false
